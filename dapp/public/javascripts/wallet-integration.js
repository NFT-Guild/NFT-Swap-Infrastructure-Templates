import {
    Blockfrost,
    Lucid,
    Data,
    applyParamsToScript,
    toText,
    toHex,
    fromText,
    Constr,
    C
} from "https://unpkg.com/lucid-cardano@0.10.9/web/mod.js"; // Conway era from NPM

// BLOCKFROST MAINNET / PREPROD SETTING - CHANGE TO YOUR DESIRED ENVIRONMENT
// const blockfrost_api_url = 'https://cardano-mainnet.blockfrost.io/api/v0'; // mainnet
const blockfrost_api_url = 'https://cardano-preprod.blockfrost.io/api/v0'; // preprod
// const blockfrost_api_url = 'https://cardano-preview.blockfrost.io/api/v0'; // preview

// consider to reengineer so blockfrost_api_key is invisible, if you experience miss-use
// const blockfrost_api_key = 'mainnet2ft7EEUl9M35b8mkDf3JJUDsTAkYhwTG';
const blockfrost_api_key = 'preprodMfHHmnvXiqRJhRQU37EpjXwLEY5aboJA'; // Example only: register with blockfrost and create your own project id
// const blockfrost_api_env = 'Mainnet'; // mainnet
const blockfrost_api_env = 'Preprod'; // preprod
// const blockfrost_api_env = 'Preview'; // preview 

// TX EXPLORER MAINNET / PREPROD SETTING - CHANGE TO YOUR DESIRED ENVIRONMENT
// const tx_explorer_url = 'https://cardanoscan.io/transaction'; // mainnet
const tx_explorer_url = 'https://preprod.cardanoscan.io/transaction'; // preprod
// const tx_explorer_url = 'https://preview.cardanoscan.io/transaction' // preview

// ADDRESS RANDOM ORACLES
// const oracle_address = "addr1wx7kl7up8vw4c5m203yuvggtheeq9hlkh77ecvn34r6yaegv3t2ft" // mainnet STEAK v1 smart contract
const oracle_address = "addr_test1wr0m6zfqvqgrcvh8lfhqdnukzn0x7y6udmu4vprg0flzyvg2rzzfl"; // preprod test address containing a STEAK oracle copy

// ADD YOUR BUILT SWAP POOL CONTRACT(S). MAKE SURE THE ORDER IS SAME AS IN DAPP SETTINGS FILE (specific_swap.js)
const smartContracts = [
    // contract 1
    {
        "type": "PlutusV2",
        "script": "contract 1 cbor hex"
    },
    // contract 2
    {
        "type": "PlutusV2",
        "script": "contract 2 cbor hex"
    }
];

// If you have submitted any of your scripts on chain as reference scripts, provide the UTxO info here.
// Reference scripts reduce swap transaction size and fees
const referenceScripts = [
    // contract 1
    {
        txHash: "42f69d70bb53f2ed7a3939e97dabb9d31a08018d54f483579f949d869bfe538a",
        outputIndex: 0,
    },
    // contract 2
    {}
];

/*
// EXAMPLE SWAP CONTRACT DEFINITION
const smartContracts = [
    // Common (Policy wide contract initialized with policy id of Trybbles collection)
    {
        "type": "PlutusV2",
        "script": "590f6d590f6a010000332332233223232323233223232323232323232323233223232323232323232323232323232323232323232323232323232323232322323222232325335323232323232325335333573466e1c015200004104015335303f3350425335333573466e1ccc0a0c0494004d401c88005400810410041044cd5ce2481414e756d626572206f6620746f6b656e7320726571756573746564206e6f7420657175616c20746f206e756d626572206f6620746f6b656e73207265636569766564000403350425335333573466e2540092000040041104113357389201414174206c65617374206f6e6520746f6b656e20697320726571756972656420666f722073776170206f7065726174696f6e20746f20626520706572666f726d6564000403350425335333573466e1cc8cccd54c0cc48004c8cd40dc88ccd40e000c004008d40d4004cd40d8888c00cc008004800488cdc0000a400400290001981399a8211a8039100099a82101ea8219919aa98190900091a80091001000a800a40000820802082266ae7124013b556e6c697374656420746f6b656e732063616e206f6e6c792062652077697468647261776e2062792074686520636f6e7472616374206f776e65720004050431041133573892010b53574150204641494c45440004015335333573466e1c015200204104015335323235002222222222222533533355304012001501f25335333573466e3c03800414013c4d412800454124010841404138d402088009400c41044cd5ce248142434c45414e5550204641494c45443a204f7065726174696f6e2063616e206f6e6c7920626520706572666f726d656420627920636f6e7472616374206f776e65722000040132632026335738920112554e535550504f5254454420414354494f4e000261302933355302c1200122533532323500222350032232335005233500425335333573466e3c00800412c1285400c412881288cd4010812894cd4ccd5cd19b8f00200104b04a15003104a1533500321533500221335002233500223350022335002233044002001204d2335002204d23304400200122204d222335004204d2225335333573466e1c01800c14013c54cd4ccd5cd19b8700500205004f1333573466e1c01000414013c413c413c412054cd4004841204120cc0ecc0f8c04801940f0d4d40088800488880104cd410c00800440054108d540088888888888880304cc098c040c09cc8c8d4004888888888888ccd54c0e44800488d40088888d401088cd4008802094cd4ccd5cd19b8f0010170560551335057335504d0050060081008504f00a5002300e0023500522001135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4080084d5d0a80619a8100109aba1500b33502002235742a014666aa048eb9408cd5d0a804999aa8123ae502335742a01066a0400526ae85401cccd540900a9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40d1d69aba150023035357426ae8940088c98c80e4cd5ce01b01c81b89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81a3ad35742a004606a6ae84d5d1280111931901c99ab9c036039037135573ca00226ea8004d5d09aba2500223263203533573806406a06626aae7940044dd50009aba1500533502075c6ae854010ccd540900988004d5d0a801999aa8123ae200135742a00460506ae84d5d1280111931901899ab9c02e03102f135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60306ae84d5d1280291931901199ab9c020023021375a00c6666ae68cdc39aab9d375400c9000101091931901099ab9c01e02101f3333573466e1cd55cea803a40004646424660020060046eb8d5d09aba25008375c6ae85401c8c98c8080cd5ce00e81000f080f89931900f99ab9c491035054350001f135573ca00226ea80044d55cf280089baa00123553353500122350022222222222223333500d2503a2503a2503a23335530321200150112350012253355335333573466e3cd400888008d40108800811010c4ccd5cd19b8735002220013500422001044043104313503e0031503d00d21350012235001222235004223350022301f4988cd540cc0040144c055262200213350242253350022100310015029233002503200132001355031222533500110022213500222330073330080020060010033200135503022225335001100222135002225335333573466e1c005200003503413330080070060031333008007335036123330010080030020060031232230023758002640026aa060446666aae7c004940c88cd40c4c010d5d080118019aba2002014232323333573466e1cd55cea8012400046644246600200600460146ae854008c014d5d09aba2500223263201433573802202802426aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046605860266ae854008cd4034048d5d09aba2500223263201933573802c03202e26aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900d99ab9c01801b019018017135573aa00226ea8004d5d0a80119a804bae357426ae8940088c98c8054cd5ce00900a80989aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d540b488c8cccd55cf80112818119a81799aa81298031aab9d5002300535573ca00460086ae8800c0484d5d080089119191999ab9a3370ea002900011a81318029aba135573ca00646666ae68cdc3a801240044a04c464c6402466ae7003c04804003c4d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7003c04804003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae7002c0380304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801201801426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573802402a02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c00b00e00c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d4005200223020375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00400580480409aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00900c00a009008135573aa00226ea80048c8cccd5cd19b8750014800880888cccd5cd19b8750024800080888c98c8020cd5ce00280400300289aab9d375400292010350543100232632003335738921024c670000349848004c8004d540748894cd400840048854cd400c540848854cd4ccd54c04848004d40414058c05c0080184cc01c0180044cd4088008cc01c018004c8004d54070888cd4009200022350022225335330170030061337000026601000800c266e012000330080040063200135501b225335001133501b335501101633501b33550110164800140714070884d400888ccc02006c004c01800cc8004d54068894cd40044cd4068cd54040054cd4068cd540400552000501b501b2213330050183535002220012222003300400122233553009120012350012233550130023355300c12001235001223355016002333500123300a4800000488cc02c0080048cc02800520000013355300912001235001223355013002333500123355300d1200123500122335501700235500e0010012233355500901400200123355300d1200123500122335501700235500d00100133355500400f002001111222333553004120015019335530081200123500122335501200235500900133355300412001223500222533533355300d120013500b5011235001223300a0020050061003133501d004003501a00133553008120012350012232335501300330010053200135501e225335001135500a003221350022253353300c002008112223300200a00413006003002320013550172211222533500110022213300500233355300712001005004001112122230030041121222300100412335006223335003220020020013500122001320013550132211225335001150162213350173004002335530061200100400132001355012221122253350011350060032213335009005300400233355300712001005004001123500122001123500122002122123300100300211233001225335002100e100100b22333573466e3c00800403002c448848cc00400c0088848cc00400c00848488c00800c44880048488c00400d221002233700004002640026aa00a44a66a002200844264a66a0062002200c60080022440042440022244004244244660020080062246460020024466006600400400298140d8799f581c484c5306ea7f9212c31e712e13a74415ce8261d60a45fff67f12212b581c141efecf55e4e6c91399e1d4561f9845481369a6f200209d4085ae9eff0001"
    },
    // Rare (Filtered contract initialized with policy id of Trybbles and list of NFTs that are rare)
    {
        "type":"PlutusV2",
        "script":""
    },
    // 040 - 049 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {
        "type": "PlutusV2",
        "script": ""
    },
    // 050 - 059 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {
        "type": "PlutusV2",
        "script": ""
    },
    // 070 - 075 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {
        "type": "PlutusV2",
        "script": ""
    },
    // 039 - 075
    {
        "type": "PlutusV2",
        "script": ""
    },
    // 030 - 100
    {
        "type":"PlutusV2",
        "script":""
    },
    // Random
    {
        "type":"PlutusV2",
        "script":""
    }
];

// If you have submitted any of your scripts on chain as reference scripts, provide the UTxO info here.
// Reference scripts reduce swap transaction size and fees
const referenceScripts = [
    // Common (Policy wide contract initialized with policy id of Trybbles collection)
    {
        txHash: "42f69d70bb536f2d7a3939e97dabb9d31a08018d54f483579f949d869bfe538a",
        outputIndex: 0,
    },
    // Rare (Filtered contract initialized with policy id of Trybbles and list of NFTs that are rare)
    {},
    // 040 - 049 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {},
    // 050 - 059 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {},
    // 070 - 075 (TokenName Rule contract initialized with NFT prefix and numbered range)
    {},
    // 039 - 075
    {
        txHash: "225542925e10fb16275cbb15d39ae132ec4abafa324c1551bb967ab46459019f",
        outputIndex: 0,
    },
    // 030 - 100
    { 
        txHash: "c99cc5cf9f6330db4ca6cabfbd520a3eb0ef04944f13e458ea28af0880baa046", 
        outputIndex: 0
    },
    // Random
    {}
];
*/

/////////////////////////////
// ONLY CHANGE IF NEW VERSIONS OF CONTRACTS HAVE BEEN PUBLISHED!!
// UNINITIALIZED CONTRACTS REQUIRED FOR BUILDING SWAP POOL CONTRACTS
// specific-swap-v2.plutus (must be initialized with parameters)
const uninitSwapPlutusCbor = "590f28590f2501000032332233223232323233223232323232323232323233223232323232323232323232323232323232323232323232323232323232322323222232325335323232323232325335333573466e1c015200004104015335303f3350425335333573466e1ccc0a0c0494004d401c88005400810410041044cd5ce249414e756d626572206f6620746f6b656e7320726571756573746564206e6f7420657175616c20746f206e756d626572206f6620746f6b656e73207265636569766564000403350425335333573466e2540092000040041104113357389201414174206c65617374206f6e6520746f6b656e20697320726571756972656420666f722073776170206f7065726174696f6e20746f20626520706572666f726d6564000403350425335333573466e1cc8cccd54c0cc48004c8cd40dc88ccd40e000c004008d40d4004cd40d8888c00cc008004800488cdc0000a400400290001981399a8211a8039100099a82101ea8219919aa98190900091a80091001000a800a40000820802082266ae7124013b556e6c697374656420746f6b656e732063616e206f6e6c792062652077697468647261776e2062792074686520636f6e7472616374206f776e65720004050431041133573892010b53574150204641494c45440004015335333573466e1c015200204104015335323235002222222222222533533355304012001501f25335333573466e3c03800414013c4d412800454124010841404138d402088009400c41044cd5ce248142434c45414e5550204641494c45443a204f7065726174696f6e2063616e206f6e6c7920626520706572666f726d656420627920636f6e7472616374206f776e65722000040132632026335738920112554e535550504f5254454420414354494f4e000261302933355302c1200122533532323500222350032232335005233500425335333573466e3c00800412c1285400c412881288cd4010812894cd4ccd5cd19b8f00200104b04a15003104a1533500321533500221335002233500223350022335002233044002001204d2335002204d23304400200122204d222335004204d2225335333573466e1c01800c14013c54cd4ccd5cd19b8700500205004f1333573466e1c01000414013c413c413c412054cd4004841204120cc0ecc0f8c04801940f0d4d40088800488880104cd410c00800440054108d540088888888888880304cc098c040c09cc8c8d4004888888888888ccd54c0e44800488d40088888d401088cd4008802094cd4ccd5cd19b8f0010170560551335057335504d0050060081008504f00a5002300e0023500522001135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4080084d5d0a80619a8100109aba1500b33502002235742a014666aa048eb9408cd5d0a804999aa8123ae502335742a01066a0400526ae85401cccd540900a9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40d1d69aba150023035357426ae8940088c98c80e4cd5ce01b01c81b89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81a3ad35742a004606a6ae84d5d1280111931901c99ab9c036039037135573ca00226ea8004d5d09aba2500223263203533573806406a06626aae7940044dd50009aba1500533502075c6ae854010ccd540900988004d5d0a801999aa8123ae200135742a00460506ae84d5d1280111931901899ab9c02e03102f135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60306ae84d5d1280291931901199ab9c020023021375a00c6666ae68cdc39aab9d375400c9000101091931901099ab9c01e02101f3333573466e1cd55cea803a40004646424660020060046eb8d5d09aba25008375c6ae85401c8c98c8080cd5ce00e81000f080f89931900f99ab9c491035054350001f135573ca00226ea80044d55cf280089baa00123553353500122350022222222222223333500d2503a2503a2503a23335530321200150112350012253355335333573466e3cd400888008d40108800811010c4ccd5cd19b8735002220013500422001044043104313503e0031503d00d21350012235001222235004223350022301f4988cd540cc0040144c055262200213350242253350022100310015029233002503200132001355031222533500110022213500222330073330080020060010033200135503022225335001100222135002225335333573466e1c005200003503413330080070060031333008007335036123330010080030020060031232230023758002640026aa060446666aae7c004940c88cd40c4c010d5d080118019aba2002014232323333573466e1cd55cea8012400046644246600200600460146ae854008c014d5d09aba2500223263201433573802202802426aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046605860266ae854008cd4034048d5d09aba2500223263201933573802c03202e26aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900d99ab9c01801b019018017135573aa00226ea8004d5d0a80119a804bae357426ae8940088c98c8054cd5ce00900a80989aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d540b488c8cccd55cf80112818119a81799aa81298031aab9d5002300535573ca00460086ae8800c0484d5d080089119191999ab9a3370ea002900011a81318029aba135573ca00646666ae68cdc3a801240044a04c464c6402466ae7003c04804003c4d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7003c04804003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae7002c0380304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801201801426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573802402a02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c00b00e00c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d4005200223020375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00400580480409aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00900c00a009008135573aa00226ea80048c8cccd5cd19b8750014800880888cccd5cd19b8750024800080888c98c8020cd5ce00280400300289aab9d375400292010350543100232632003335738921024c670000349848004c8004d540748894cd400840048854cd400c540848854cd4ccd54c04848004d40414058c05c0080184cc01c0180044cd4088008cc01c018004c8004d54070888cd4009200022350022225335330170030061337000026601000800c266e012000330080040063200135501b225335001133501b335501101633501b33550110164800140714070884d400888ccc02006c004c01800cc8004d54068894cd40044cd4068cd54040054cd4068cd540400552000501b501b2213330050183535002220012222003300400122233553009120012350012233550130023355300c12001235001223355016002333500123300a4800000488cc02c0080048cc02800520000013355300912001235001223355013002333500123355300d1200123500122335501700235500e0010012233355500901400200123355300d1200123500122335501700235500d00100133355500400f002001111222333553004120015019335530081200123500122335501200235500900133355300412001223500222533533355300d120013500b5011235001223300a0020050061003133501d004003501a00133553008120012350012232335501300330010053200135501e225335001135500a003221350022253353300c002008112223300200a00413006003002320013550172211222533500110022213300500233355300712001005004001112122230030041121222300100412335006223335003220020020013500122001320013550132211225335001150162213350173004002335530061200100400132001355012221122253350011350060032213335009005300400233355300712001005004001123500122001123500122002122123300100300211233001225335002100e100100b22333573466e3c00800403002c448848cc00400c0088848cc00400c00848488c00800c44880048488c00400d221002233700004002640026aa00a44a66a002200844264a66a0062002200c6008002244004244002224400424424466002008006224646002002446600660040040021"

// specific-swap-filtered-v2.plutus (must be initialized with parameters)
const uninitFilteredSwapPlutusCbor = "590efe590efb0100003233223322323232323322323232323232323232323322323232323232323232323232323232323232323232323232323232323223232322223232533532323232323232325335333573466e1c01120000420411533530403350435335333573466e1ccc018c0514004d4020888008cc018c050c0a4c8c8d4004888888888888ccd54c0f04800488d40088888d401088cd4008802094cd4ccd5cd19b8f001017059058133505a33550500050060081008505200a500330120033500822200204204110421335738921414e756d626572206f6620746f6b656e7320726571756573746564206e6f7420657175616c20746f206e756d626572206f6620746f6b656e73207265636569766564000413350435335333573466e1cc8cccd54c0d048004c8cd40e088ccd40e400c004008d40d8004cd40dc888c00cc008004800488cdc0000a400400290001981519a8219a80411100119a82181f28221919aa98198900091a80091001000a800a40000840822084266ae712413b556e6c697374656420746f6b656e732063616e206f6e6c792062652077697468647261776e2062792074686520636f6e7472616374206f776e65720004150441042133573892010b53574150204641494c45440004115335333573466e1c011200204204115335323235002222222222222533533355304112001502125335333573466e3c0380041441404d412c0045412801084144413cd402488800d400841084cd5ce24942434c45414e5550204641494c45443a204f7065726174696f6e2063616e206f6e6c7920626520706572666f726d656420627920636f6e7472616374206f776e65722000041132632028335738920112554e535550504f5254454420414354494f4e000281302a33355302d1200122533532323500222350032232335005233500425335333573466e3c00800413012c5400c412c812c8cd4010812c94cd4ccd5cd19b8f00200104c04b15003104b1533500321533500221335002233500223350022335002233045002001204e2335002204e23304500200122204e222335004204e2225335333573466e1c01800c14414054cd4ccd5cd19b870050020510501333573466e1c01000414414041404140412454cd4004841244124cc0f0c0fcc05001540f4d4d40088800488880104cd41100080044005410cd540048888888888880304d400488008cccd5cd19b8735573aa00e9000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233502302435742a01866a0460486ae85402ccd408c094d5d0a805199aa813bae502635742a012666aa04eeb94098d5d0a80419a8118161aba150073335502702d75a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233503775a6ae854008c0e0d5d09aba2500223263203c33573807207807426aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a06eeb4d5d0a801181c1aba135744a004464c6407866ae700e40f00e84d55cf280089baa001357426ae8940088c98c80e0cd5ce01a81c01b09aab9e5001137540026ae854014cd408dd71aba1500433355027029200135742a006666aa04eeb88004d5d0a80118159aba135744a004464c6406866ae700c40d00c84d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a803980d9aba135744a00e464c6404c66ae7008c098090dd68041999ab9a3370e6aae74dd5004240004048464c6404866ae70084090088c8004d540fc888cd400920002235002222533553353303a00300615335500910442213335530371200135035503b303c004500b10431337000026601000800c266e012000330080040061350012220013333573466e1cd55cea8042400046464642466600200800600466a024eb8d5d09aba25009375c6ae854020dd71aba1500823263202133573803c04203e2040264c6404066ae712410350543500020135573ca00226ea80044d5d1280089aab9e50011375400246aa66a6a002446a0044444444444446666a01a4a0724a0724a0724666aa606224002a02246a00244a66aa66a666ae68cdc79a801110011a802110010218210999ab9a3370e6a004440026a00844002086084208426a07a0062a07801a426a002446a00244446a0084466a0044603e93119aa8190008028980aa4c44004266a04644a66a004420062002a050466004a062002640026aa060444a66a00220044426a004446600e66601000400c002006640026aa05e4444a66a00220044426a00444a66a666ae68cdc3800a4000068066266601000e00c006266601000e66a06a2466600201000600400c0062464460046eb0004c8004d540bc88cccd55cf80092818919a81818021aba1002300335744004028464646666ae68cdc39aab9d5002480008cc8848cc00400c008c028d5d0a80118029aba135744a004464c6402866ae700440500484d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc0acc04cd5d0a80119a8068091aba135744a004464c6403266ae7005806405c4d55cf280089baa00135742a008666aa010eb9401cd5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201b33573803003603203002e26aae7540044dd50009aba1500233500975c6ae84d5d1280111931900a99ab9c012015013135744a00226ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa81611191999aab9f0022502f233502e3355024300635573aa004600a6aae794008c010d5d100180909aba100112232323333573466e1d400520002350253005357426aae79400c8cccd5cd19b87500248008940948c98c8048cd5ce00780900800789aab9d500113754002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c8048cd5ce00780900800780700689aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c8038cd5ce00580700609aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401866ae700240300284dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402a66ae7004805404c04804404003c0380344d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200e33573801601c01801626aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a40044603e6eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900599ab9c00800b009008135573aa00226ea8004488c8c8cccd5cd19b87500148010848880048cccd5cd19b875002480088c84888c00c010c018d5d09aab9e500423333573466e1d400d20002122200223263200c33573801201801401201026aae7540044dd50009191999ab9a3370ea0029001101091999ab9a3370ea0049000101091931900419ab9c005008006005135573a6ea800524010350543100232632003335738921024c670000349848004c8004d54070894cd40044cd4070cd5404805ccd4070cd5404805d2000501d501d221350022233300901c00130060033200135501b2225335002100122153350031501f2215335333553010120013500e501430150020061330070060011335020002330070060013200135501a225335001133501a335501001533501a335501001548001406d406c884ccc014060d4d400888004888800cc010004888cd54c024480048d400488cd5404c008cd54c030480048d400488cd54058008ccd40048cc0292000001223300b00200123300a00148000004cd54c024480048d400488cd5404c008ccd40048cd54c034480048d400488cd5405c008d5403800400488ccd5540240500080048cd54c034480048d400488cd5405c008d54034004004ccd55401003c008004444888ccd54c010480054064cd54c020480048d400488cd54048008d54024004ccd54c0104800488d4008894cd4ccd54c03448004d402d40448d400488cc028008014018400c4cd407401000d4068004cd54c020480048d400488c8cd5404c00cc004014c8004d54078894cd40044d5402800c884d4008894cd4cc03000802044888cc0080280104c01800c008c8004d5405c88448894cd40044008884cc014008ccd54c01c480040140100044484888c00c0104484888c00401048cd401888ccd400c88008008004d400488004c8004d5404c8844894cd400454058884cd405cc010008cd54c01848004010004c8004d5404888448894cd40044d401800c884ccd4024014c010008ccd54c01c4800401401000448d40048800448d40048800848848cc00400c008448cc004894cd40084038400402c88ccd5cd19b8f00200100c00b112212330010030022212330010030021212230020031122001212230010034881002233700004002640026aa00a44a66a002200844264a66a0062002200c6008002244004244002224400424424466002008006224646002002446600660040040021"

// specific-swap-tn-rule-v2.plutus (must be initialized with parameters)
const uninitRuleSwapPlutusCbor = ""

// random-swap-v1 (must be initialized with parameters)
const uninitRandomPlutusCbor = "" 

/////////////////////////////

const unitDatum = () => Data.void();

async function getSwapPoolUTxO(smartContractIndex) {
    const lucid = await connectToLucid();
    const poolSCAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);
    const utxoAtScript = await lucid.utxosAt(poolSCAddress);
    return utxoAtScript;
}

async function waitForTxConfirm(txid, spinnerId) {
    
    const response = await fetch(`/api_tx_status`, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        mode: "cors", // no-cors, *cors, same-origin
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
        },
        redirect: "follow", // manual, *follow, error
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: `{"_tx_hashes":["${txid}"]}`, // body data type must match "Content-Type" header
    });

    const jsonData = await response.json();

    if(jsonData[0].tx_hash == txid) {
        if(jsonData[0].num_confirmations > 0) {
            // tx confirmed. stop spinner
            hideElem(spinnerId);
            // reload page
            document.location.reload();
        }
        else {
            // tx still not confirmed. wait 1 second and ask again
            setTimeout(waitForTxConfirm, 1000, txid, spinnerId);
        }
    }
}

async function withdrawFromPool(hash, idx, smartContractIndex) {
    var msg;
    const spinnerId = 'testWithdrawSpinner';

    const lucid = await connectToLucid();

    const withdrawRedeemer = () => Data.to(1n);
    const poolSCAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);

    const utxoAtScript = await lucid.utxosAt(poolSCAddress);
    
    const utxo = utxoAtScript.filter((utxo) => utxo.txHash == hash && utxo.outputIndex == idx);

    const bech32_addr = await lucid.wallet.address();
    const addrDetails = lucid.utils.getAddressDetails(bech32_addr);

    const paymentKeyHash = addrDetails.paymentCredential.hash;

    var txCreatedSuccessfully = true;

    var tx;

    if(referenceScripts[smartContractIndex].txHash == undefined) {
        // withdraw using attached script
        tx = await lucid.newTx()
        .collectFrom(utxo, withdrawRedeemer())
        .attachSpendingValidator(smartContracts[smartContractIndex])
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })
    }
    else {
        // script is on chain. Use reference script
        const refScriptUtxo = await lucid.utxosByOutRef([referenceScripts[smartContractIndex]]);

        tx = await lucid
        .newTx()
        .readFrom(refScriptUtxo)
        .collectFrom(utxo, withdrawRedeemer())
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })
    }

    if (!txCreatedSuccessfully) return msg ;

    var txSubmittedSuccessfully = true;
    var txHash = '';
    try {
        showElem(spinnerId);
        txHash = await signAndSubmitTx(tx, spinnerId)
    }
    catch(error) {
        txSubmittedSuccessfully = false;
        msg = 'Tx submission failed: ' + error;
        hideElem(spinnerId);
    }

    if (!txSubmittedSuccessfully) return msg;

    msg = `Withdrawal performed.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
    return msg;
}

async function signAndSubmitTx(tx, spinnerId) {
        const signedTx = await tx.sign().complete();
        return await submitTx(signedTx, spinnerId);
}

async function submitTx(signedTx, spinnerId) {
    const tid = await signedTx.submit();
    console.log("Cardano tx submitted: " + tid);
    waitForTxConfirm(tid, spinnerId);
    return tid;
}

async function depositLovelace(amount, smartContractIndex) {
    var msg;
    const spinnerId = 'testDepositSpinner';
    
    const lucid = await connectToLucid();

    const desintationSCAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);

    var txCreatedSuccessfully = true;
    const tx = await lucid
        .newTx()
        .payToContract(desintationSCAddress, unitDatum(), { lovelace: BigInt(amount) })
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })

    if (!txCreatedSuccessfully) return msg ;

    var txSubmittedSuccessfully = true;
    var txHash = '';
    try {
        showElem(spinnerId);
        txHash = await signAndSubmitTx(tx, spinnerId)
    }
    catch(error) {
        txSubmittedSuccessfully = false;
        msg = 'Tx submission failed: ' + error;
        hideElem(spinnerId);
    }

    if (!txSubmittedSuccessfully) return msg;

    msg = `Deposit sent to contract.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
    return msg;
}

async function buildSpecificSwap(policyid) {

    const lucid = await connectToLucid();

    const bech32_addr = await lucid.wallet.address();

    const pkh = lucid.utils.getAddressDetails(bech32_addr).paymentCredential?.hash || "";

    const specificSwapValidator = {
        type: "PlutusV2",
        script: applyParamsToScript(
            uninitSwapPlutusCbor,
            [new Constr(0, [pkh, policyid])]
        )
    };

    const specificSwapAddress = lucid.utils.validatorToAddress(specificSwapValidator);

    return {
        message: "Swap pool generated successfully",
        swapPoolContractScript: specificSwapValidator,
        swapPoolAddress: specificSwapAddress,
        swapPoolOwnerAddress: bech32_addr
    };
}

async function buildRandomSwap(policyid) {

    const lucid = await connectToLucid();

    const bech32_addr = await lucid.wallet.address();

    const pkh = lucid.utils.getAddressDetails(bech32_addr).paymentCredential?.hash || "";

    const randomSwapValidator = {
        type: "PlutusV2",
        script: applyParamsToScript(
            uninitRandomPlutusCbor,
            [new Constr(0, [pkh, policyid, pkh])]
        )
    };

    const randomSwapAddress = lucid.utils.validatorToAddress(randomSwapValidator);

    return {
        message: "Random pool generated successfully",
        swapPoolContractScript: randomSwapValidator,
        swapPoolAddress: randomSwapAddress,
        swapPoolOwnerAddress: bech32_addr
    };
}

async function buildSpecificFilteredSwap(policyid) {
    
    if (selectedPoolNFTs.length == 0) return { message: "Please select NFTs for the filter" };

    var nftNameHex;
    var filterNFTsHex = [];
    var filterNFTNames = [];
    for (var i = 0; i < selectedPoolNFTs.length; i++) {
        nftNameHex = selectedFilterNFTNameMap.get(selectedPoolNFTs[i])
        filterNFTsHex.push(nftNameHex);
        filterNFTNames.push(toText(nftNameHex));
    }

    const lucid = await connectToLucid();

    const bech32_addr = await lucid.wallet.address();
    
    const pkh = lucid.utils.getAddressDetails(bech32_addr).paymentCredential?.hash || "";
    
    const specificFilteredSwapValidator = {
        type: "PlutusV2",
        script: applyParamsToScript(
            uninitFilteredSwapPlutusCbor,
            [new Constr(0, [pkh, policyid, filterNFTsHex])]
        )
    };
    
    const specificSwapAddress = lucid.utils.validatorToAddress(specificFilteredSwapValidator);

    return {
        message: "Filtered swap pool generated successfully",
        swapPoolContractScript: specificFilteredSwapValidator,
        swapPoolAddress: specificSwapAddress,
        swapPoolOwnerAddress: bech32_addr,
        nftsHex: filterNFTsHex,
        nftsNames: filterNFTNames
    };
}

async function buildSpecificRuleSwap(policyid, nftNamePrefix, digitIndexStart, digitLength, digitRangeFirst, digitRangeLast) {

    let utf8Encoder = new TextEncoder();
    let prefixBytes = utf8Encoder.encode(nftNamePrefix)

    let prefixHex = toHex(prefixBytes);

    const lucid = await connectToLucid();

    const bech32_addr = await lucid.wallet.address();
    
    const pkh = lucid.utils.getAddressDetails(bech32_addr).paymentCredential?.hash || "";
    
    const specificRuleSwapValidator = {
        type: "PlutusV2",
        script: applyParamsToScript(
            uninitRuleSwapPlutusCbor,
            //[new Constr(0, [pkh, policyid, nft name prefix (hex), start index, length, nft num from, nft num to])]
            [new Constr(0, [pkh, policyid, prefixHex, BigInt(digitIndexStart), BigInt(digitLength), BigInt(digitRangeFirst), BigInt(digitRangeLast)])]
        )
    };

    const specificRuleSwapAddress = lucid.utils.validatorToAddress(specificRuleSwapValidator);

    return {
        message: "Rule based swap pool generated successfully",
        swapPoolContractScript: specificRuleSwapValidator,
        swapPoolAddress: specificRuleSwapAddress,
        swapPoolOwnerAddress: bech32_addr,
        swapPoolRules: {
            nftNamePrefix: nftNamePrefix,
            digitIndexStart: parseInt(digitIndexStart),
            digitLength: parseInt(digitLength),
            digitRangeFirst: parseInt(digitRangeFirst),
            digitRangeLast: parseInt(digitRangeLast)
        }
    };
}

async function getSwapPoolAddress(smartContractIndex) {
    const lucid = await connectToLucid();

    const specificSwapAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);
    
    return specificSwapAddress;
}

async function addNFTsToPool(smartContractIndex) {
    var msg;
    const spinnerId = 'addNFTSpinner';

    const lucid = await connectToLucid();

    const specificSwapAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);
    
    var walletAssetsToSend = [];
    walletAssetsToSend = getSelectedWalletAssets(walletAssetsToSend)

    var txCreatedSuccessfully = true;

    var tx = await lucid
        .newTx()
        .payToContract(`${specificSwapAddress}`, unitDatum(), walletAssetsToSend)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })

    if (!txCreatedSuccessfully) return msg ;

    var txSubmittedSuccessfully = true;
    var txHash = '';
    try {
        showElem(spinnerId);
        txHash = await signAndSubmitTx(tx, spinnerId)
    }
    catch(error) {
        txSubmittedSuccessfully = false;
        msg = 'Tx submission failed: ' + error;
        hideElem(spinnerId);
    }

    if (!txSubmittedSuccessfully) return msg;

    msg = `Add performed.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
    return msg;
}

async function removeNFTsFromPool(smartContractIndex) {
    var msg;
    const spinnerId = 'removeNFTSpinner';

    const lucid = await connectToLucid();
    const specificSwapAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);
    
    const bech32_addr = await lucid.wallet.address();
    const addrDetails = lucid.utils.getAddressDetails(bech32_addr);

    const paymentKeyHash = addrDetails.paymentCredential.hash;
    
    // Temporary Quick-Fix. Will be changed in final release.
    // if not the random swap contract, create simple Redeemer that contains the Integer 1, removal action.
    // for the random swap, create redeemer object that contains the needed properties and Integer 1, removal action as last property.
    const withdrawRedeemer = () => smartContractIndex < 7 ? Data.to(1n) : Data.to(new Constr(0, [paymentKeyHash, "3132333435", 100n, 12345n, 1n, 2n, 500n, 10n, 1n]));

    // get assets selected from the swap pool
    const utxoArray = await lucid.utxosAt(specificSwapAddress);
    const utxosToSpend = getUTxOsOfSelectedPoolAssets(utxoArray)
    
    // get assets to return to pool. If UTxOs have multiple NFTs, we will need to return the "non-selected" NFTs back to the pool 
    const poolAssetsNotSelected = getPoolAssetsToReturnToSc(utxosToSpend);
    
    // add selected wallet assets to return to pool
    const assetsToReturnToSc = getSelectedWalletAssets(poolAssetsNotSelected);
    
    var txCreatedSuccessfully = true;

    var tx;

    if(referenceScripts[smartContractIndex].txHash == undefined) {
        // remove NFT using attached script
        tx = await lucid
        .newTx()
        .payToContract(`${specificSwapAddress}`, unitDatum(), assetsToReturnToSc)
        .collectFrom(utxosToSpend, withdrawRedeemer())
        .attachSpendingValidator(smartContracts[smartContractIndex])
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        });
    }
    else {
        // script is on chain. Use reference script
        const refScriptUtxo = await lucid.utxosByOutRef([referenceScripts[smartContractIndex]]);

        tx = await lucid
        .newTx()
        .readFrom(refScriptUtxo)
        .payToContract(`${specificSwapAddress}`, unitDatum(), assetsToReturnToSc)
        .collectFrom(utxosToSpend, withdrawRedeemer())
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        });
    }
    
    if (!txCreatedSuccessfully) return msg ;

    var txSubmittedSuccessfully = true;
    var txHash = '';
    try {
        showElem(spinnerId);
        txHash = await signAndSubmitTx(tx, spinnerId)
    }
    catch(error) {
        txSubmittedSuccessfully = false;
        msg = 'Tx submission failed: ' + error;
        hideElem(spinnerId);
    }

    if (!txSubmittedSuccessfully) return msg;

    msg = `Removal performed.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
    return msg;
}


async function doSwap(smartContractIndex) {

    var msg;
    const spinnerId = 'swapNFTsSpinner';

    if (numSelectedPoolNFTs != numSelectedWalletNFTs) {
        msg = "Error: Selected NFTs from pool doesn't equal number selected NFTs from wallet";
        return msg;
    }

    const lucid = await connectToLucid();

    const swapRedeemer = () => Data.to(0n); // redeemer = 0 is the swap action

    const specificSwapAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);
   
    const bech32_addr = await lucid.wallet.address();
    const addrDetails = lucid.utils.getAddressDetails(bech32_addr);

    const paymentKeyHash = addrDetails.paymentCredential.hash;

    // get assets selected from the swap pool
    const utxoArray = await lucid.utxosAt(specificSwapAddress);
    const utxosToSpend = getUTxOsOfSelectedPoolAssets(utxoArray)

    // get assets to return to pool. If UTxOs have multiple NFTs, we will need to return the "non-selected" NFTs back to the pool 
    const poolAssetsNotSelected = getPoolAssetsToReturnToSc(utxosToSpend);
    
    // add selected wallet assets to return to pool
    const assetsToReturnToSc = getSelectedWalletAssets(poolAssetsNotSelected);
    
    var txCreatedSuccessfully = true;
    var tx;

    if(referenceScripts[smartContractIndex].txHash == undefined) {
        // swap with attached script
        tx = await lucid
        .newTx()
        .payToContract(`${specificSwapAddress}`, unitDatum(), assetsToReturnToSc)
        .collectFrom(utxosToSpend, swapRedeemer())
        .attachSpendingValidator(smartContracts[smartContractIndex])
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })
    }
    else {
        // script is on chain. Use reference script
        const refScriptUtxo = await lucid.utxosByOutRef([referenceScripts[smartContractIndex]]);

        tx = await lucid
        .newTx()
        .readFrom(refScriptUtxo)
        .payToContract(`${specificSwapAddress}`, unitDatum(), assetsToReturnToSc)
        .collectFrom(utxosToSpend, swapRedeemer())
        .addSignerKey(paymentKeyHash)
        .complete()
        .catch(error => {
            txCreatedSuccessfully = false;
            msg = 'Tx creation failed: ' + error;
        })
    }

    if (!txCreatedSuccessfully) return msg ;

    var txSubmittedSuccessfully = true;
    var txHash = '';
    try {
        showElem(spinnerId);
        txHash = await signAndSubmitTx(tx, spinnerId)
    }
    catch(error) {
        txSubmittedSuccessfully = false;
        msg = 'Tx submission failed: ' + error;
        hideElem(spinnerId);
    }

    if (!txSubmittedSuccessfully) return msg;

    msg = `Swap performed.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
    return msg;
}

function getOracleData(oracle) {
    // get random number from oracle datum
    const datum_fields = oracle.inline_datum.value.fields;
    const block_data = datum_fields[2];

    const oracleData = {};
    oracleData.block_no = block_data.fields[0].int;
    oracleData.block_hash = block_data.fields[1].bytes;
    oracleData.steak_slot = block_data.fields[2].int;
    return oracleData;
}

async function calculateNewRandomHex(oracleHex, slot) {
    // Convert slot to hexadecimal and pad to 8 characters
    const slotHex = slot.toString(16).padStart(8, '0');
    
    // Concatenate slot_hex and oracle_hex
    const combinedHex = slotHex + oracleHex;
    
    // Convert the combined hex string to a Uint8Array
    const combinedBytes = new Uint8Array(combinedHex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
    
    // Calculate SHA-256 hash using Web Crypto API
    const hashBuffer = await crypto.subtle.digest('SHA-256', combinedBytes);
    
    // Convert the hash buffer to a hex string
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    
    const newRandomHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    return newRandomHex;
}

async function doRandomSwap(smartContractIndex) {
    // Still in development. Not ready for mainnet use
    var msg;
    const spinnerId = 'swapNFTsSpinner';

    try {
        const randomOracle = await getRandomOracle();
        const oracleData = getOracleData(randomOracle);
        
        const slot = oracleData.steak_slot + 10100; // Temporary slot calculation. Will get blockchain slot in final version
        
        // calculating the hash of the oracle / slot combo
        try {
            const newRandom = await calculateNewRandomHex(oracleData.block_hash, slot);
            
            // getting the random integer from the first 4 bytes (8 characters) of the random hex
            const randomIntegerHex = newRandom.slice(0, 8);

            const randomInteger = BigInt(`0x${randomIntegerHex}`);
            
            // calculating the target value of closest match for this oracle / slot combination
            const targetValue = Number(randomInteger % 65536n);

            const lucid = await connectToLucid();
            const randomSwapAddress = lucid.utils.validatorToAddress(smartContracts[smartContractIndex]);

            const swap_pool_assets = await getAddressAssets(randomSwapAddress);
            
            // looping through NFTs to find closest match
            var closestMatch = Number.MAX_SAFE_INTEGER;
            var diff, closestName, closestIndex, closestMatchArray;
            for (var i = 0; i < swap_pool_assets.length; i++) {
                // calculating indexes of characters to use from the NFT name
                const nftName = swap_pool_assets[i].asset_name; //"54727962626c65735365726965734f6e65456d6f6b6f31343830396f663235";
                const nameLength = nftName.length;

                const position1 = nameLength - 1 - Number(randomInteger % 8n);
                const position2 = nameLength - 1 - Number((randomInteger / 256n) % 8n);
                
                const byte1 = parseInt(nftName.substr(position1, 2), 16);
                const byte2 = parseInt(nftName.substr(position2, 2), 16);   
                
                const selectedValue = (byte1 * 256) + byte2;
                
                const diff = Math.abs(selectedValue - targetValue)
                if (diff < closestMatch) {
                    // diff is smaller than current closest match. Save this NFT as closest match
                    closestMatch = diff;
                    closestName = nftName;
                    closestIndex = i;
                    // save info about current closest match in a list
                    closestMatchArray = [
                        newRandom, 
                        randomIntegerHex, 
                        BigInt(targetValue), 
                        BigInt(slot),
                        BigInt(position1),
                        BigInt(position2),
                        BigInt(selectedValue),
                        BigInt(diff),
                        10n // action = 10 - validate random swap selection
                    ]
                }
            }
            
            // prepare redeemer with information about the closest match
            // redeemer will be validated by the random swap smart contract
            const swapRedeemer = () => Data.to(
                new Constr(0, closestMatchArray)
            );

            const bech32_addr = await lucid.wallet.address();
            const addrDetails = lucid.utils.getAddressDetails(bech32_addr);
            const paymentKeyHash = addrDetails.paymentCredential.hash;
            
            // get assets selected from the swap pool
            const utxoArray = await lucid.utxosAt(randomSwapAddress);
            
            // "select" the pool NFT in UI, without displaying the UI dialog to the user
            selectedPoolNFTs = [`pool_nft_list_${swap_pool_assets[closestIndex].policy_id}${swap_pool_assets[closestIndex].asset_name}`]
            
            const utxosToSpend = getUTxOsOfSelectedPoolAssets(utxoArray);
            
            // get assets to return to pool. If UTxOs have multiple NFTs, we will need to return the "non-selected" NFTs back to the pool 
            const poolAssetsNotSelected = getPoolAssetsToReturnToSc(utxosToSpend);
            
            // add selected wallet assets to return to pool
            const assetsToReturnToSc = getSelectedWalletAssets(poolAssetsNotSelected);
            
            var txCreatedSuccessfully = true;
            var tx;
            
            // locate the UTxO containing the randomness oracle block.
            // while we are in preproduction, the oracle is located in the swap pool.
            // when we move to mainnet, the oracle is located in the Oracle smart contract
            const oracleUTxOs = await lucid.utxosAt(randomSwapAddress);
            var oracleRefUTxOs = [], tmpUtxo;
            for(var i = 0; i < oracleUTxOs.length && oracleRefUTxOs.length == 0; i++) {
                tmpUtxo = oracleUTxOs[i];
                if(tmpUtxo.txHash == randomOracle.tx_hash && 
                    tmpUtxo.outputIndex == randomOracle.tx_index) {
                        // oracle block found. Keep utxo for later use
                        oracleRefUTxOs.push(tmpUtxo);
                }
            }

            if(oracleRefUTxOs.length == 0) {
                return "Could not find the randomness oracle. Please try again later."
            }
            
            // create the swap transaction using prepared settings
            tx = await lucid
                .newTx()
                .readFrom(oracleRefUTxOs)
                .payToContract(`${randomSwapAddress}`, unitDatum(), assetsToReturnToSc)
                .collectFrom(utxosToSpend, swapRedeemer())
                .attachSpendingValidator(smartContracts[smartContractIndex])
                .addSignerKey(paymentKeyHash)
                .complete()
                .catch(error => {
                    txCreatedSuccessfully = false;
                    msg = 'Tx creation failed: ' + error;
                })
            
            if (!txCreatedSuccessfully) return msg;

            // submit the transaction
            var txSubmittedSuccessfully = true;
            var txHash = '';
            try {
                showElem(spinnerId);
                txHash = await signAndSubmitTx(tx, spinnerId)
            }
            catch (error) {
                txSubmittedSuccessfully = false;
                msg = 'Tx submission failed: ' + error;
                hideElem(spinnerId);
            }
            
            if (!txSubmittedSuccessfully) return msg;

            msg = `Swap performed.<br> Waiting for confirmation from the Cardano blockchain.<br> Transaction id: <a target="_blank" href="${tx_explorer_url}/${txHash}">${txHash}</a>`;
            return msg;
        

        } catch (error) {
            console.error("Error:", error);
        }

    } catch (error) {
        console.error('doRandomSwap failed', error);
    }
}

function getUTxOsOfSelectedPoolAssets(addressUTxOs) {
   
    var nftUTxO;
    var selectedUTxOs = [];
    for (var i = 0; i < selectedPoolNFTs.length; i++) {
        nftUTxO = addressUTxOs.find((u) => u.assets[getAsset(selectedPoolNFTs[i])] == 1n);

        if (nftUTxO) {
            selectedUTxOs.push(nftUTxO);
        }
    }

    return selectedUTxOs;
}

function getPoolAssetsToReturnToSc(addressUTxOs) {
    var assets = {};
    var assetNames;
    for (var i = 0; i < addressUTxOs.length; i++) {
        assetNames = Object.keys(addressUTxOs[i].assets);
                
        for (var j = 0; j < assetNames.length; j++) { 
            if (assetNames[j] != 'lovelace' && !selectedPoolNFTs.includes(`pool_nft_list_${assetNames[j]}`, 0)) {
                // NFT is not one of the selected ones...return the asset to the SC
                assets[assetNames[j]] = addressUTxOs[i].assets[assetNames[j]];  
            } 
        }
    }
    return assets;
}

function getSelectedWalletAssets(assetsToReturnToSc) {
    
    var asset;
    for (var i = 0; i < selectedWalletNFTs.length; i++) {
        asset = getAsset(selectedWalletNFTs[i]);
        if (asset) {
            assetsToReturnToSc[asset] = 1n;
        }
    }
    return assetsToReturnToSc;
}

async function connectToLucid() {    
    const lucid = await Lucid.new(
        new Blockfrost(blockfrost_api_url, blockfrost_api_key), blockfrost_api_env
    );
    const api = await window.cardano[connectedWalletExtName].enable();
    lucid.selectWallet(api);
    return lucid;
}

async function getRandomOracle() {
    return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        
        const apiquery = '/api_get_latest_steak_block';
        const params = `{"_addresses":["${oracle_address}"]}`;

        xhr.open('POST', apiquery, false);
        xhr.setRequestHeader('accept', 'application/json');
        xhr.setRequestHeader('content-type', 'application/json');
        xhr.send(params);
        
        if (xhr.status === 200) {
            
            const steak_block_tx = JSON.parse(xhr.response);
            var output, inline_datum, inline_datum_value, datum_fields;
            
            for (var j = 0; j < steak_block_tx.outputs.length; j++) {
                
                output = steak_block_tx.outputs[j];
                if (output.inline_datum == null) continue;

                inline_datum_value = output.inline_datum.value;
                if (inline_datum_value == null) continue;

                inline_datum = output.inline_datum;

                datum_fields = inline_datum_value.fields;
                
                if (datum_fields.length == 6) {
                    resolve(output);
                    return; // oracle found...stop loop
                }
            }
            
            reject(new Error("Oracle not found"));
        }

    });
}

// function used during development and preproduction debugging to copy the latest randomness oracle from mainnet as the oracle is not available in preproduction.
async function copyOracleFromMainnet() {
    var xhr = new XMLHttpRequest();
    
    const apiquery = '/api_get_latest_steak_block';
    const params = `{"_addresses":["addr1wx7kl7up8vw4c5m203yuvggtheeq9hlkh77ecvn34r6yaegv3t2ft"]}`;
   
    // get the latest randomness oracle block in the mainnet address
    xhr.open('POST', apiquery, false);
    xhr.setRequestHeader('accept', 'application/json');
    xhr.setRequestHeader('content-type', 'application/json');
    xhr.send(params);

    if (xhr.status === 200) {
        const steak_block_tx = JSON.parse(xhr.response);
        var output, inline_datum, inline_datum_value, datum_fields, pool_data, block_data;
        // loop through all transactions until the latest randomness block is found
        for(var j = 0; j < steak_block_tx.outputs.length; j++) {
            output = steak_block_tx.outputs[j];
            if(output.inline_datum == null) continue;

            inline_datum_value = output.inline_datum.value;
            if(inline_datum_value == null) continue;

            inline_datum = output.inline_datum;

            datum_fields = inline_datum_value.fields;
            
            if(datum_fields.length == 6) {
                // randomness oracle block with correct structure was found.
                break;
            }
            inline_datum = null;
            datum_fields = null;
            inline_datum_value = null;
        }

        // add datum as Data in a preproduction transaction
        datum_fields = inline_datum_value.fields;
        
        // steak chain datum...use to get random number info
        block_data = datum_fields[2];

        // fetch randomness data from the transaction datum
        const block_no = block_data.fields[0].int;
        const block_hash = block_data.fields[1].bytes;
        const steak_slot = block_data.fields[2].int;
      
        // construct new datum to post as part of the preproduction transaction
        const datum = new Constr(0,[
            new Constr(0,[]),
            new Constr(0,[]),
            new Constr(0,[BigInt(block_no), block_hash, BigInt(steak_slot)]),
            new Constr(0,[]),
            new Constr(0,[0n]),
            new Constr(0,[])
        ])

        const preprod_blockfrost_api_url = 'https://cardano-preprod.blockfrost.io/api/v0'; // preprod
        const preprod_blockfrost_api_key = 'preprodMfHHmnvXiqRJhRQU37EpjXwLEY5aboJA'; 

        const preprodLucid = await Lucid.new(
            new Blockfrost(preprod_blockfrost_api_url, preprod_blockfrost_api_key), 'Preprod'
        );
        const preprodAPI = await window.cardano['eternl'].enable();
        preprodLucid.selectWallet(preprodAPI);

        const oracleAddress = preprodLucid.utils.validatorToAddress(smartContracts[7]);
        
        // post the minimal copy of the randomness oracle to preproduction
        const tx = await preprodLucid
        .newTx()
        .payToAddressWithData(oracleAddress, {inline: Data.to(datum)}, { lovelace: 3000000n})
        .attachMetadata(674, {"msg":["Mine Block"]})
        .complete()
        .catch(error => {
            console.error('error', error);
        })

        try {
            await signAndSubmitTx(tx, 'spinnerId')
        }
        catch(error) {
            console.error('Tx submission failed', error);
        }   
    }
    else {
        console.log('Unable to fetch transactions from the randomness address on mainnet');
    }
}

function getAsset(assetString) {
    // return only the asset part of string
    var index = assetString.lastIndexOf('_');
    if (index == -1) return ''; // asset not found / invalid format

    // valid asset found
    index = index + 1;
    return assetString.substring(index);
}

window.copyOracleFromMainnet = copyOracleFromMainnet;
window.doSwap = doSwap;
window.doRandomSwap = doRandomSwap;
window.getUTxOsOfSelectedPoolAssets = getUTxOsOfSelectedPoolAssets;
window.getSelectedWalletAssets = getSelectedWalletAssets;
window.getPoolAssetsToReturnToSc = getPoolAssetsToReturnToSc;
window.connectToLucid = connectToLucid;
window.buildSpecificSwap = buildSpecificSwap;
window.buildRandomSwap = buildRandomSwap;
window.buildSpecificRuleSwap = buildSpecificRuleSwap;
window.addNFTsToPool = addNFTsToPool;
window.getSwapPoolAddress = getSwapPoolAddress;
window.removeNFTsFromPool = removeNFTsFromPool;
window.depositLovelace = depositLovelace;
window.withdrawFromPool = withdrawFromPool;
window.buildSpecificFilteredSwap = buildSpecificFilteredSwap;
window.getSwapPoolUTxO = getSwapPoolUTxO;
